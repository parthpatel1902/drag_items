<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Drag and Drop Demo using Socket</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  <style>
    .task {
      padding: 10px;
      margin: 10px;
      border: 1px solid #ddd;
      cursor: grab;
      text-align: center;
      font-size: 20px;
      list-style: none;
      font-weight: bolder;
      font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
      width: 300px;
      border-radius: 15px;
    }
    .task.dragging {
      opacity: 0.5;
    }
  </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <center>
                    <ul id="taskList">
                        
                    </ul>
                </center>
            </div>
        </div>
    </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    const taskList = document.getElementById('taskList');

    socket.on('displayItems', (tasks) => {
        taskList.innerHTML = '';
        tasks.forEach(task => {
            const li = document.createElement('li');
            li.textContent = task.name;
            li.className = 'task';
            li.draggable = true;
            li.dataset.id = task.id;
            li.dataset.priority = task.priority;
            li.style.backgroundColor = task.color;
            taskList.appendChild(li);
        });
    });

    let dragged;

    let touchStartY = 0;

    taskList.addEventListener('dragstart', (e) => {
      dragged = e.target;
      e.target.classList.add('dragging');
    });

    taskList.addEventListener('dragend', (e) => {
      e.target.classList.remove('dragging');
    });

    taskList.addEventListener('dragover', (e) => {
      e.preventDefault();
      const afterElement = getDragAfterElement(taskList, e.clientY);
      if (afterElement == null) {
        taskList.appendChild(dragged);
      } else {
        taskList.insertBefore(dragged, afterElement);
      }
    });

    taskList.addEventListener('drop', () => {
      const updatedTasks = Array.from(taskList.children).map((child, index) => ({
        id: parseInt(child.dataset.id, 10),
        name: child.textContent,
        priority: index + 1,
        color: child.style.backgroundColor
      }));
      socket.emit('changePriority', updatedTasks);
    });

    taskList.addEventListener('touchstart', (e) => {
      const touch = e.tTouches[0];
      const target = document.elementFromPoint(touch.clientX, touch.clientY);
      if (target && target.classList.contains('task')) {
        dragged = target;
        touchStartY = touch.clientY;
        target.classList.add('dragging');
        e.preventDefault();
      }
    });

    taskList.addEventListener('touchmove', (e) => {
      const touch = e.touches[0];
      const target = document.elementFromPoint(touch.clientX, touch.clientY);
      if (target && dragged) {
        const afterElement = getDragAfterElement(taskList, touch.clientY);
        if (afterElement == null) {
          taskList.appendChild(dragged);
        } else {
          taskList.insertBefore(dragged, afterElement);
        }
        e.preventDefault();
      }
    });

    taskList.addEventListener('touchend', (e) => {
      if (dragged) {
        dragged.classList.remove('dragging');
        const updatedTasks = Array.from(taskList.children).map((child, index) => ({
          id: parseInt(child.dataset.id, 10),
          name: child.textContent,
          priority: index + 1,
          color: child.style.backgroundColor // Preserve the color property
        }));
        socket.emit('changePriority', updatedTasks);
        dragged = null;
      }
    });

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.task:not(.dragging)')];

      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }
  </script>
</body>
</html>
